package dev.lochert.ds.blockchain.http

import com.sun.net.httpserver.HttpExchange
import com.sun.net.httpserver.HttpServer
import dev.lochert.ds.blockchain.address.AddressList
import dev.lochert.ds.blockchain.block.Block
import dev.lochert.ds.blockchain.block.BlockChain
import dev.lochert.ds.blockchain.http.handlers.*
import java.io.OutputStream
import java.net.InetSocketAddress

/**
 * Dummy Code generated by ChatGPT
 */
@Deprecated("Use Initial and Regular Server")
fun main(args: Array<String>) {
    val port = if (args.isNotEmpty()) args[0].toInt() else 8080
    val server = HttpServer.create(InetSocketAddress(port), 0)

    val addressList = AddressList()
    val blockChain = BlockChain(Block.genesisNode)
    repeat(4){
        blockChain.addBlock(it.toString())
    }

    // Address handlers (GET & POST)
    server.createContext("/address", AddressHandler(addressList))

    // Block handlers (GET & POST)
    server.createContext("/block", BlockHandler(blockChain))

    // Get a specific block by hash or by index (genesis block is 0)
    server.createContext("/block/hash", BlockHandlerHash(blockChain))
    server.createContext("/block/index", BlockHandlerIndex(blockChain))

    // Send a node the instruction to add a block
    server.createContext("/control/add-block", ControlAddHandler(blockChain))

    // Sends a message to each node in the address list and asks them for their addresses
    server.createContext("/control/populate-addresslist", ControlAddrPopulateHandler(blockChain))

    server.executor = null
    server.start()
    println("Server started on port $port")
}

/**
 * Utility function to send an HTTP response.
 */
fun sendResponse(exchange: HttpExchange, response: String, code: Int = 200) {
    exchange.sendResponseHeaders(code, response.toByteArray().size.toLong())
    val os: OutputStream = exchange.responseBody
    os.write(response.toByteArray())
    os.close()
}
